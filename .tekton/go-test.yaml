apiVersion: tekton.dev/v1
kind: Task
metadata:
  annotations:
    tekton.dev/pipelines.minVersion: 0.12.1
    tekton.dev/tags: image-build, appstudio, hacbs
  labels:
    app.kubernetes.io/version: '0.2'
    build.appstudio.redhat.com/build_type: docker
  name: mpc-test-runner-ta
spec:
  description: |-
    run go-test using Konflux trusted artifacts patters.
  params:
  - default: /var/workdir/source
    description: directory to execute in
    name: source
    type: string
  - description: The produced source trusted artifact URI
    name: SOURCE_ARTIFACT
    type: string
  - default: ''
    description: The produced prefetched dependencies trusted artifact URI
    name: CACHI2_ARTIFACT
    type: string
  results:
  - description: unit test results
    name: UNIT_TEST_RESULTS
  stepTemplate:
    volumeMounts:
    - mountPath: "/var/workdir"
      name: workdir
    env:
    - name: BUILDER_IMAGE
      value: registry.access.redhat.com/ubi9/ubi
  steps:
  - args:
    - use
    - "$(params.SOURCE_ARTIFACT)=/var/workdir/source"
    - "$(params.CACHI2_ARTIFACT)=/var/workdir/cachi2"
    image: quay.io/lucarval/build-trusted-artifacts:latest@sha256:8f65579cdc92e0d68f261997d8c61040fe3313d0493da4c0fe64ba4252d582ae
    name: use-trusted-artifact
  - computeResources:
      limits:
        memory: 4Gi
      requests:
        cpu: 250m
        memory: 512Mi
    env:
    image: registry.redhat.io/rhel9/go-toolset
    name: go-test
    script: |
      set -o verbose
      set -eu
      set -o pipefail
      mkdir -p ~/.ssh
      if [ -e "/ssh/error" ]; then
        #no server could be provisioned
        cat /ssh/error
        exit 1
      elif [ -e "/ssh/otp" ]; then
       curl --cacert /ssh/otp-ca -XPOST -d @/ssh/otp $(cat /ssh/otp-server) >~/.ssh/id_rsa
       echo "" >> ~/.ssh/id_rsa
      else
        cp /ssh/id_rsa ~/.ssh
      fi
      chmod 0400 ~/.ssh/id_rsa
      export SSH_HOST=$(cat /ssh/host)
      export BUILD_DIR=$(cat /ssh/user-dir)
      export SSH_ARGS="-o StrictHostKeyChecking=no"
      mkdir -p scripts
      echo "$BUILD_DIR"
      ssh $SSH_ARGS "$SSH_HOST"  mkdir -p "$BUILD_DIR/workspaces" "$BUILD_DIR/scripts" "$BUILD_DIR/tmp"
      
      
      echo -e local arch is: $(arch)
      echo -e remote arch is:
      ssh $SSH_ARGS "$SSH_HOST" /bin/bash -c "arch"

      
      # transfers data
      rsync -ra /var/workdir/source/ "$SSH_HOST:$BUILD_DIR/workspaces/source/"
      # transfers data
      # rsync -ra $(workspaces.source.path)/ "$SSH_HOST:$BUILD_DIR/workspaces/source/"
      
      # write the script to disk:
      cat >scripts/script-build.sh <<'REMOTESSHEOF'
      #!/bin/bash
      set -o verbose
      yum install -y golang
      echo 'script-build.sh start'
      echo -e platform is: $(uname -m)
      
      # debugging
      pwd
      ls -alR

      cd /source
      go test

      REMOTESSHEOF
      
      # make it executable
      chmod +x scripts/script-build.sh
      
      # sync scripts dir to the SSH Host
      rsync -ra scripts "$SSH_HOST:$BUILD_DIR"
      
      # execute the script in a container on the SSH host
      ssh $SSH_ARGS "$SSH_HOST" podman  run \
      -e PARAM_BUILDER_IMAGE="registry.redhat.io/rhel9/go-toolset" \
      -v $BUILD_DIR/scripts:/script:Z \
      -v "$BUILD_DIR/workspaces/source:/source:Z" \
      --user=0  --rm  "$BUILDER_IMAGE" /script/script-build.sh

    securityContext:
      capabilities:
        add:
        - SETFCAP
    volumeMounts:
    - mountPath: "/var/lib/containers"
      name: varlibcontainers
    - mountPath: "/entitlement"
      name: etc-pki-entitlement
    - mountPath: /ssh
      name: ssh
      readOnly: true
    workingDir: "/var/workdir"
  volumes:
  - emptyDir: {}
    name: varlibcontainers
  - name: etc-pki-entitlement
    secret:
      optional: true
      secretName: "$(params.ENTITLEMENT_SECRET)"
  - emptyDir: {}
    name: workdir
  - name: ssh
    secret:
      optional: false
      secretName: multi-platform-ssh-$(context.taskRun.name)
